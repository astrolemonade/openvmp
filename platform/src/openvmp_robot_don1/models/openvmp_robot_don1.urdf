<?xml version="1.0"?>
<robot
  name="openvmp_robot_don1"
  xmlns:xacro="http://www.ros.org/wiki/xacro"
>
  <!-- xmlns="http://www.ros.org/wiki/urdf"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xacro="http://www.ros.org/wiki/xacro" -->
  <!-- xsi:schemaLocation="http://www.ros.org/wiki/urdf
  https://raw.github.com/laas/urdf_validator/master/urdf.xsd" -->


  <!-- ****************** COMMAND LINE PARAMETERS *******************************  -->
  <!-- Generate the model suitable for simulation in Gazebo -->
  <xacro:arg name="simulate" default="false" />
  <xacro:arg name="fake_hardware" default="false" />
  <xacro:arg name="namespace" default="" />
  <xacro:arg name="controllers_yaml_path"
    default="$(find openvmp_robot_don1)/config/ros2_controllers.yaml" />
  <xacro:arg name="has_extra_parameters_file" default="false" />
  <xacro:arg name="extra_parameters_file" default="" />
  <xacro:arg name="mesh_extension" default="stl" />

  <xacro:arg name="is_mac" default="false" />
  <xacro:unless value="$(arg is_mac)">
    <xacro:property name="plugin_extension" value="so" />
  </xacro:unless>
  <xacro:if value="$(arg is_mac)">
    <xacro:property name="plugin_extension" value="dylib" />
  </xacro:if>

  <!-- ****************** ROBOT CONSTANTS *******************************  -->
  <!-- Define the size of the robot's main chassis in meters -->
  <xacro:property name="board_length" value="0.6" />
  <xacro:property name="board_width" value="0.2" />
  <xacro:property name="board_height" value="0.003" />

  <xacro:property name="base_length" value="${board_length}" />
  <xacro:property name="base_width" value="${board_width}" />
  <xacro:property name="base_height" value="0.2" />
  <xacro:property name="base_height_gap" value="0.1" />

  <!-- Wheels dimensions -->
  <xacro:property name="wheel_radius" value="${0.136 / 2}" />
  <xacro:property name="wheel_width" value="0.024" />

  <!-- Position the front wheels -->
  <xacro:property name="turn_table_radius" value="${board_width/2}" />
  <xacro:property name="turn_table_height" value="0.05" />
  <xacro:property name="turn_table_zoff" value="0.001" />
  <xacro:property name="turn_table_xoff" value="${base_length/2 - 0.03}" />

  <!-- Arm parameters-->
  <xacro:property name="arm1_length" value="0.3" />
  <xacro:property name="arm2_length" value="0.3045" />
  <xacro:property name="arm_height_delta" value="0" />
  <xacro:property name="arm_height_shortage" value="0.038" />

  <!-- Physics parameters -->
  <xacro:macro name="solid_hard" params="name material">
    <gazebo reference="${name}">
      <mu1>2.0</mu1>
      <mu2>2.0</mu2>
      <material>${material}</material>
    </gazebo>
  </xacro:macro>
  <xacro:macro name="solid_soft" params="name material">
    <gazebo reference="${name}">
      <mu1>10.0</mu1>
      <mu2>10.0</mu2>
      <material>${material}</material>
    </gazebo>
  </xacro:macro>
  <xacro:macro name="gazebo_joint" params="name">
    <gazebo reference="${name}">
      <!-- <dampingFactor>0.1</dampingFactor> -->
    </gazebo>
  </xacro:macro>
  <!-- <xacro:macro name="gazebo_fixed_joint" params="name">
    <gazebo reference="${name}">
      <disableFixedJointLumping>true</disableFixedJointLumping>
      <preserveFixedJoint>true</preserveFixedJoint>
    </gazebo>
  </xacro:macro> -->
  <!-- TODO(clairbee) use 'xlink' instead of all 'link' below -->
  <!-- <xacro:macro name="xlink" params="name material **visual **collision **inertial">
    <link name="${name}">
      <xacro:insert_block name="visual" />
      <xacro:insert_block name="collision" />
      <xacro:insert_block name="inertial" />
    </link>
    <xacro:solid_hard name="${name}" material="${material}" />
  </xacro:macro> -->

  <!-- Define intertial property macros  -->
  <!-- <xacro:macro name="box_inertia" params="m w h d"> -->
  <xacro:macro name="box_inertia" params="m x y z *origin">
    <inertial>
      <xacro:insert_block name="origin" />
      <mass value="${m}" />
      <inertia ixx="${(m/12) * (y*y + z*z)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (x*x + z*z)}"
        iyz="0.0" izz="${(m/12) * (x*x + y*y)}" />
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h *origin">
    <inertial>
      <xacro:insert_block name="origin" />
      <mass value="${m}" />
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy="0" ixz="0" iyy="${(m/12) * (3*r*r + h*h)}"
        iyz="0" izz="${(m/2) * (r*r)}" />
    </inertial>
  </xacro:macro>

  <!-- ****************** ROBOT BASE FOOTPRINT ***************************  -->
  <!-- Define the center of the main robot chassis projected on the ground -->
  <link name="base_footprint" />

  <!-- The base footprint of the robot is located underneath the chassis -->
  <joint name="base_joint" type="fixed">
    <parent link="base_footprint" />
    <child link="base_link" />
    <origin xyz="0.0 0.0 1.0" rpy="0 0 0" />
  </joint>
  <!-- <xacro:gazebo_fixed_joint name="base_joint" /> -->


  <!-- ********************** ROBOT BASE *********************************  -->
  <link name="base_link">
    <visual>
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
      <geometry>
        <box size="${base_length} ${base_width} ${base_height/2}" />
        <!-- <mesh filename="package://openvmp_robot/meshes/base.stl" scale="0.001 0.001 0.001"/> -->
      </geometry>
      <material name="Red">
        <color rgba="${255/255} ${0/255} ${0/255} 1.0" />
      </material>
    </visual>

    <collision>
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
      <geometry>
        <box size="${base_length} ${base_width} ${base_height/2}" />
      </geometry>
    </collision>

    <xacro:box_inertia m="4.0" x="${base_length}" y="${base_width}" z="${base_height/2}">
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
    </xacro:box_inertia>

  </link>
  <xacro:solid_hard name="base_link" material="Gazebo/Red" />
  <gazebo reference="base_link">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <topic>__default_topic__</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <!-- <namespace>/demo</namespace> -->
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
        <topic_name>imu</topic_name>
        <body_name>base_link</body_name>
        <update_rate_HZ>10.0</update_rate_HZ>
        <gaussian_noise>0.0</gaussian_noise>
        <xyz_offset>0 0 0</xyz_offset>
        <rpy_offset>0 0 0</rpy_offset>
        <frame_name>base_link</frame_name>
      </plugin>
      <always_on>true</always_on>
      <!-- <pose>0 0 0 0 0 0</pose> -->
      <update_rate>10</update_rate>
      <visualize>true</visualize>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>

  <link name="base_link2">
    <visual>
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
      <geometry>
        <box size="${base_length/2} ${base_width} ${base_height/2}" />
      </geometry>
      <material name="Red">
        <color rgba="${255/255} ${0/255} ${0/255} 1.0" />
      </material>
    </visual>

    <collision>
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
      <geometry>
        <box size="${base_length/2} ${base_width} ${base_height/2}" />
      </geometry>
    </collision>

    <xacro:box_inertia m="2.0" x="${base_length/2}" y="${base_width}" z="${base_height/2}">
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
    </xacro:box_inertia>
  </link>
  <xacro:solid_hard name="base_link2" material="Gazebo/Red" />
  <joint name="base_joint2" type="fixed">
    <parent link="base_link" />
    <child link="base_link2" />
    <origin xyz="0.0 0.0 ${base_height/2}" rpy="0 0 0" />
  </joint>
  <!-- <xacro:gazebo_fixed_joint name="base_joint2" /> -->


  <!-- *********************** DRIVE WHEELS ******************************  -->

  <xacro:macro name="wheel"
    params="prefix parent limit radius width x_off y_off z_off x_angle collision:=true dir:=1">
    <link name="${prefix}_link">
      <visual>
        <!-- <origin xyz="${x_off} ${y_off} ${z_off}" rpy="${x_angle} 0 0"/> -->
        <origin xyz="0 0 0" rpy="${x_angle} 0 0" />
        <geometry>
          <cylinder radius="${radius}" length="${width}" />
        </geometry>
        <material name="White">
          <color rgba="${255/255} ${255/255} ${255/255} 1.0" />
        </material>
      </visual>

      <xacro:if value="${collision}">
        <collision>
          <origin xyz="0 0 0" rpy="${x_angle} 0 0" />
          <geometry>
            <cylinder radius="${radius}" length="${width}" />
          </geometry>
          <surface>
            <friction>
              <ode>
                <mu>10.0</mu>
                <mu2>10.0</mu2>
                <slip1>0.25</slip1>
                <slip2>0.25</slip2>
              </ode>
            </friction>
          </surface>
        </collision>
      </xacro:if>

      <xacro:cylinder_inertia m="0.5" r="${radius}" h="${width}">
        <origin xyz="0 0 0" rpy="${x_angle} 0 0" />
      </xacro:cylinder_inertia>
    </link>
    <xacro:solid_soft name="${prefix}_link" material="Gazebo/Green" />

    <!-- Connect the wheels to the origin at the appropriate location, and
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
    <joint name="${prefix}_joint" type="revolute">
      <parent link="${parent}" />
      <child link="${prefix}_link" />
      <origin xyz="${x_off} ${y_off} ${z_off}" rpy="0 0 0" />
      <limit upper="${limit}" lower="${-limit}" effort="10" velocity="1.0" />
      <axis xyz="0 0 ${dir}" />
    </joint>
    <xacro:gazebo_joint name="${prefix}_joint" />
  </xacro:macro>

  <!-- Camera -->
  <xacro:macro name="cam" params="prefix index dir armdir">
    <gazebo reference="${prefix}_camera_${index}">
      <sensor type="camera" name="camera_${prefix}_${index}">
        <always_on>true</always_on>
        <update_rate>30.0</update_rate>
        <camera name="camera_${prefix}_${index}">
          <horizontal_fov>1.2</horizontal_fov>
          <image>
            <width>320</width>
            <height>200</height>
            <format>R8G8B8</format>
          </image>
          <distortion>
            <k1>0.0</k1>
            <k2>0.0</k2>
            <k3>0.0</k3>
            <p1>0.0</p1>
            <p2>0.0</p2>
            <center>0.5 0.5</center>
          </distortion>
        </camera>
        <plugin name="camera_${prefix}_${index}" filename="libgazebo_ros_camera.so">
          <ros>
            <!-- <namespace>stereo</namespace> -->
            <remapping>~/image_raw:=image_raw</remapping>
            <remapping>~/camera_info:=camera_info</remapping>
          </ros>
          <camera_name>camera_${prefix}_${index}</camera_name>
          <frame_name>${prefix}_camera_optical_${index}</frame_name>
          <hack_baseline>0.2</hack_baseline>
        </plugin>
      </sensor>
      <material>Gazebo/Green</material>
    </gazebo>
  </xacro:macro>

  <!-- Robot leg (aka arm) -->
  <xacro:macro name="robot_arm" params="prefix parent dir armdir">
    <link name="${prefix}_lower_part">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <box size="0.048 0.235 0.048" />
        </geometry>
        <material name="Red">
          <color rgba="${255/255} ${0/255} ${0/255} 1.0" />
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <box size="0.048 0.235 0.048" />
        </geometry>
      </collision>

      <xacro:box_inertia m="1.0" x="0.048" y="0.235" z="0.048">
        <origin xyz="0 0 0" rpy="0 0 0" />
      </xacro:box_inertia>
    </link>
    <xacro:solid_hard name="${prefix}_lower_part" material="Gazebo/Red" />

    <joint name="${prefix}_joint" type="revolute">
      <parent link="${parent}" />
      <child link="${prefix}_lower_part" />
      <origin xyz="0.0 ${armdir*(0.12 + 0.024 + 0.012)} 0.0" rpy="0 0 0" />
      <limit upper="${pi}" lower="${-pi}" effort="10" velocity="1.0" />
      <axis xyz="0 ${-dir*0.1} 0" />
    </joint>
    <xacro:gazebo_joint name="${prefix}_joint" />

    <link name="${prefix}_upper_part">
      <visual>
        <origin xyz="0 ${armdir*(0.12 + 0.048)} -${wheel_radius-arm_height_delta}" rpy="0 0 0" />
        <geometry>
          <box size="0.048 0.205 0.048" />
        </geometry>
        <material name="Red">
          <color rgba="${255/255} ${0/255} ${0/255} 1.0" />
        </material>
      </visual>

      <collision>
        <origin xyz="0 ${armdir*(0.12 + 0.048)} -${wheel_radius-arm_height_delta}" rpy="0 0 0" />
        <geometry>
          <box size="0.048 0.195 0.048" />
        </geometry>
      </collision>

      <xacro:box_inertia m="1.0" x="0.048" y="0.195" z="0.048">
        <origin xyz="0 ${armdir*(0.12 + 0.048)} -${wheel_radius-arm_height_delta}" rpy="0 0 0" />
      </xacro:box_inertia>
    </link>
    <xacro:solid_hard name="${prefix}_upper_part" material="Gazebo/Red" />

    <joint name="${prefix}_inner_joint" type="revolute">
      <parent link="${prefix}_lower_part" />
      <child link="${prefix}_upper_part" />
      <origin
        xyz="0.0 ${armdir*(arm2_length - 0.12 - 0.048 + wheel_width/2)} ${wheel_radius+arm_height_delta+arm_height_shortage}"
        rpy="0 0 0" />
      <limit upper="${pi*0.7}" lower="${-pi*0.9}" effort="10" velocity="1.0" />
      <axis xyz="${-armdir*0.1} 0 0" />
    </joint>
    <xacro:gazebo_joint name="${prefix}_inner_joint" />

    <xacro:wheel prefix="${prefix}_wheel" parent="${prefix}_upper_part" limit="0"
      radius="${wheel_radius}" width="${wheel_width}"
      x_off="0.0" y_off="${armdir*(arm2_length - wheel_width/2)}"
      z_off="-${wheel_radius+arm_height_delta}" x_angle="${pi/2}"
    />


    <!-- The hook and the arm extension it sits on -->
    <link name="${prefix}_outer_link">
      <visual>
        <origin xyz="0.0 ${armdir*0.246} -0.192" rpy="0 0 0" />
        <geometry>
          <box size="0.048 0.048 0.192" />
        </geometry>
        <material name="Red">
          <color rgba="${255/255} ${0/255} ${0/255} 1.0" />
        </material>
      </visual>
      <collision>
        <origin xyz="0.0 ${armdir*0.246} -0.192" rpy="0 0 0" />
        <geometry>
          <box size="0.048 0.048 0.192" />
        </geometry>
      </collision>
      <xacro:box_inertia m="0.5" x="0.048" y="0.048" z="0.192">
        <origin xyz="0.0 ${armdir*0.246} -0.192" rpy="0 0 0" />
      </xacro:box_inertia>
    </link>
    <xacro:solid_hard name="${prefix}_outer_link" material="Gazebo/Red" />
    <joint name="${prefix}_outer_joint" type="fixed">
      <parent link="${prefix}_upper_part" />
      <child link="${prefix}_outer_link" />
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
    </joint>
    <xacro:gazebo_joint name="${prefix}_outer_joint" />

    <link name="${prefix}_hook_link">
      <visual>
        <origin xyz="0.0 ${armdir*0.246} -0.332" rpy="0 0 0" />
        <geometry>
          <mesh filename="package://openvmp_robot_don1/meshes/part-hook.$(arg mesh_extension)"
            scale="0.001 ${-armdir*0.001} 0.001" />
        </geometry>
        <material name="Red">
          <color rgba="${255/255} ${0/255} ${0/255} 1.0" />
        </material>
      </visual>
      <collision>
        <origin xyz="0.0 ${armdir*0.246} -0.332" rpy="0 0 0" />
        <geometry>
          <mesh filename="package://openvmp_robot_don1/meshes/part-hook.$(arg mesh_extension)"
            scale="0.001 ${-armdir*0.001} 0.001" />
        </geometry>
      </collision>
      <xacro:box_inertia m="0.5" x="0.048" y="0.048" z="0.048">
        <origin xyz="0.0 ${armdir*0.246} -0.332" rpy="0 0 0" />
      </xacro:box_inertia>
    </link>
    <xacro:solid_hard name="${prefix}_hook_link" material="Gazebo/Green" />
    <joint name="${prefix}_hook_joint" type="fixed">
      <parent link="${prefix}_outer_link" />
      <child link="${prefix}_hook_link" />
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
    </joint>
    <xacro:gazebo_joint name="${prefix}_hook_joint" />

    <!-- The cameras mount -->
    <link name="${prefix}_camera_servo_lower_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <box size="0.048 0.048 0.024" />
        </geometry>
        <material name="Red">
          <color rgba="${255/255} ${0/255} ${0/255} 1.0" />
        </material>
      </visual>

      <!-- <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <box size="0.048 0.048 0.024" />
        </geometry>
      </collision> -->

      <xacro:box_inertia m="1.0" x="0.048" y="0.048" z="0.024">
        <origin xyz="0 0 0" rpy="0 0 0" />
      </xacro:box_inertia>
    </link>
    <xacro:solid_hard name="${prefix}_camera_servo_lower_link" material="Gazebo/Red" />

    <joint name="${prefix}_camera_joint" type="fixed">
      <parent link="${parent}" />
      <child link="${prefix}_camera_servo_lower_link" />
      <origin xyz="${dir*0.024} ${armdir*(0.12 + 0.044 + 0.012)} 0.048" rpy="0 0 0" />
    </joint>
    <xacro:gazebo_joint name="${prefix}_camera_joint" />

    <link name="${prefix}_camera_servo_upper_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <box size="0.048 0.048 0.024" />
        </geometry>
        <material name="Red">
          <color rgba="${255/255} ${0/255} ${0/255} 1.0" />
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <box size="0.048 0.048 0.024" />
        </geometry>
      </collision>

      <xacro:box_inertia m="1.0" x="0.048" y="0.048" z="0.024">
        <origin xyz="0 0 0" rpy="0 0 0" />
      </xacro:box_inertia>
    </link>
    <xacro:solid_hard name="${prefix}_camera_servo_upper_link" material="Gazebo/Red" />

    <joint name="${prefix}_camera_servo_lower_joint" type="revolute">
      <parent link="${prefix}_camera_servo_lower_link" />
      <child link="${prefix}_camera_servo_upper_link" />
      <origin xyz="0.0 0.0 0.024" rpy="0 0 0" />
      <limit upper="${pi}" lower="${-pi}" effort="10" velocity="1.0" />
      <axis xyz="0 0 ${dir*0.1}" />
    </joint>
    <xacro:gazebo_joint name="${prefix}_camera_servo_lower_joint" />

    <link name="${prefix}_camera">
      <visual>
        <origin xyz="0 0.048 0" rpy="0 0 0" />
        <geometry>
          <box size="0.096 0.024 0.048" />
        </geometry>
        <material name="Red">
          <color rgba="${255/255} ${0/255} ${0/255} 1.0" />
        </material>
      </visual>

      <collision>
        <origin xyz="0 0.048 0" rpy="0 0 0" />
        <geometry>
          <box size="0.144 0.024 0.048" />
        </geometry>
      </collision>

      <xacro:box_inertia m="1.0" x="0.096" y="0.024" z="0.048">
        <origin xyz="0 0 0" rpy="0 0 0" />
      </xacro:box_inertia>
    </link>
    <xacro:solid_hard name="${prefix}_camera" material="Gazebo/Red" />

    <joint name="${prefix}_camera_servo_upper_joint" type="revolute">
      <parent link="${prefix}_camera_servo_upper_link" />
      <child link="${prefix}_camera" />
      <origin xyz="0.0 0.0 0.0" rpy="0 0 ${-dir*3*pi/6.0 + dir*armdir*pi/6.0}" />
      <limit upper="${pi}" lower="${-pi}" effort="10" velocity="1.0" />
      <axis xyz="${dir*0.1} 0 0" />
    </joint>
    <xacro:gazebo_joint name="${prefix}_camera_servo_upper_joint" />

    <!-- optical frame for the stereo camera, with z-forward notation, this is the frame stereo
    camera images users should refer to -->
    <link name="${prefix}_camera_0" />
    <joint name="${prefix}_camera_0_joint" type="fixed">
      <origin xyz="0.024 0.062 0.0" rpy="0.0 0.0 ${pi/2}" />
      <parent link="${prefix}_camera" />
      <child link="${prefix}_camera_0" />
    </joint>
    <link name="${prefix}_camera_optical_0" type="camera" />
    <joint name="${prefix}_camera_optical_0_joint" type="fixed">
      <origin xyz="0.0 0.0 0.0" rpy="${-pi/2} 0.0 ${-pi/2}" /> <!-- rotate frame from x-forward to
      z-forward camera coords -->
      <parent link="${prefix}_camera_0" />
      <child link="${prefix}_camera_optical_0" />
    </joint>
    <link name="${prefix}_camera_1" />
    <joint name="${prefix}_camera_1_joint" type="fixed">
      <origin xyz="-0.024 0.062 0.0" rpy="0.0 0.0 ${pi/2}" />
      <parent link="${prefix}_camera" />
      <child link="${prefix}_camera_1" />
    </joint>
    <link name="${prefix}_camera_optical_1" type="camera" />
    <joint name="${prefix}_camera_optical_1_joint" type="fixed">
      <origin xyz="0.0 0.0 0.0" rpy="${-pi/2} 0.0 ${-pi/2}" /> rotate frame from x-forward to
      z-forward camera coords <parent link="${prefix}_camera_1" />
      <child
        link="${prefix}_camera_optical_1" />
    </joint>

    <xacro:cam prefix="${prefix}" index="0" dir="${dir}" armdir="${armdir}" />
    <xacro:cam prefix="${prefix}" index="1" dir="${dir}" armdir="${armdir}" />
  </xacro:macro>

  <xacro:macro name="robot_half" params="prefix dir">
    <xacro:wheel prefix="${prefix}_turn_table" parent="base_link" limit="${pi/2}"
      radius="${turn_table_radius}" width="${turn_table_height}"
      x_off="${dir*turn_table_xoff}" y_off="0.0"
      z_off="${base_height_gap + base_height/8 - turn_table_height/2}" x_angle="0"
      collision="false" dir="-1"
    />
    <!-- dir="${dir}" -->

    <link name="${prefix}_body_link">
      <visual>
        <origin xyz="0 0 0.024" rpy="0 0 0" />
        <geometry>
          <box size="0.235 0.048 0.048" />
          <!-- <mesh filename="package://openvmp_robot/meshes/base.stl" scale="0.001 0.001 0.001"/> -->
        </geometry>
        <material name="Red">
          <color rgba="${255/255} ${0/255} ${0/255} 1.0" />
        </material>
      </visual>

      <!-- <collision>
        <origin xyz="0 0 0.024" rpy="0 0 0" />
        <geometry>
          <box size="0.240 0.048 0.048" />
        </geometry>
      </collision> -->

      <xacro:box_inertia m="2.0" x="0.235" y="0.048" z="0.048">
        <origin xyz="0 0 0.024" rpy="0 0 0" />
      </xacro:box_inertia>
    </link>
    <xacro:solid_hard name="${prefix}_body_link" material="Gazebo/Red" />

    <!-- central wide block -->
    <link name="${prefix}_body_link2">
      <visual>
        <origin xyz="${dir*0.100} 0 0.048" rpy="0 0 0" />
        <geometry>
          <box size="0.040 0.240 0.048" />
        </geometry>
        <material name="Red">
          <color rgba="${255/255} ${0/255} ${0/255} 1.0" />
        </material>
      </visual>
      <collision>
        <origin xyz="${dir*0.100} 0 0.048" rpy="0 0 0" />
        <geometry>
          <box size="0.040 0.240 0.048" />
        </geometry>
      </collision>
      <xacro:box_inertia m="0.5" x="0.040" y="0.240" z="0.048">
        <origin xyz="${dir*0.100} 0 0.048" rpy="0 0 0" />
      </xacro:box_inertia>
    </link>
    <xacro:solid_hard name="${prefix}_body_link2" material="Gazebo/Red" />
    <joint name="${prefix}_body_link2_joint" type="fixed">
      <parent link="${prefix}_body_link" />
      <child link="${prefix}_body_link2" />
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
    </joint>
    <xacro:gazebo_joint name="${prefix}_body_link2_joint" />

    <!-- central wheel -->
    <link name="${prefix}_body_link3">
      <visual>
        <origin xyz="0 0 0.048" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}" />
        </geometry>
        <!-- <material name="Red">
          <color rgba="${255/255} ${0/255} ${0/255} 1.0"/>
        </material> -->
      </visual>
      <collision>
        <origin xyz="0 0 0.048" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}" />
        </geometry>
      </collision>
      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}">
        <origin xyz="0 0 0.048" rpy="${pi/2} 0 0" />
      </xacro:cylinder_inertia>
    </link>
    <xacro:solid_hard name="${prefix}_body_link3" material="Gazebo/Green" />
    <joint name="${prefix}_body_link3_joint" type="fixed">
      <parent link="${prefix}_body_link" />
      <child link="${prefix}_body_link3" />
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
    </joint>
    <!-- <xacro:gazebo_fixed_joint name="${prefix}_body_link3_joint" /> -->

    <joint name="${prefix}_body_joint" type="revolute">
      <parent link="${prefix}_turn_table_link" />
      <child link="${prefix}_body_link" />
      <origin xyz="${dir*(turn_table_radius + 0.240/2)} 0.0 0.0" rpy="0 0 0" />
      <limit upper="${pi*7.0/6.0}" lower="${-pi*7.0/6.0}" effort="10" velocity="1.0" />
      <axis xyz="${dir*0.1} 0 0" />
    </joint>
    <xacro:gazebo_joint name="${prefix}_body_joint" />

    <xacro:robot_arm prefix="${prefix}_left_arm" parent="${prefix}_body_link" dir="${dir}"
      armdir="1" />
    <xacro:robot_arm prefix="${prefix}_right_arm" parent="${prefix}_body_link" dir="${dir}"
      armdir="-1" />
  </xacro:macro>

  <xacro:robot_half prefix="front" dir="1" />
  <xacro:robot_half prefix="rear" dir="-1" />

  <xacro:macro name="r2c_joint_limit" params="name pmin pmax">
    <joint name="${name}">
      <param name="prefix">/actuator/${name}</param>
      <state_interface name="position">
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="velocity">
        <param name="initial_value">0.0</param>
      </state_interface>
      <!-- <state_interface name="effort" /> -->
      <command_interface name="position">
        <param name="min">${pmin}</param>
        <param name="max">${pmax}</param>
      </command_interface>
      <!-- <command_interface name="velocity">
        <param name="min">0.25</param>
        <param name="max">0.25</param>
        <param name="initial_value">0.0</param>
      </command_interface> -->
      <!-- <command_interface name="effort" /> -->
    </joint>
  </xacro:macro>

  <xacro:macro name="r2c_quarter" params="prefix side">
    <xacro:r2c_joint_limit name="${prefix}_${side}_arm_joint" pmin="${-pi}" pmax="${pi}" />
    <xacro:r2c_joint_limit name="${prefix}_${side}_arm_inner_joint" pmin="${-pi*0.9}"
      pmax="${pi*0.7}" />
    <joint name="${prefix}_${side}_arm_wheel_joint">
      <param name="prefix">/actuator/${prefix}_${side}_arm_wheel_joint</param>
      <state_interface name="position">
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="velocity">
        <param name="initial_value">0.0</param>
      </state_interface>
      <!-- <state_interface name="effort" /> -->
      <!-- <command_interface name="position" /> -->
      <command_interface name="velocity" />
      <!-- <command_interface name="effort" /> -->
    </joint>
    <xacro:r2c_joint_limit name="${prefix}_${side}_arm_camera_servo_lower_joint" pmin="${-pi}"
      pmax="${pi}" />
    <xacro:r2c_joint_limit name="${prefix}_${side}_arm_camera_servo_upper_joint" pmin="${-pi}"
      pmax="${pi}" />
  </xacro:macro>

  <xacro:macro name="r2c_half" params="prefix">
    <xacro:r2c_joint_limit name="${prefix}_turn_table_joint" pmin="${-pi/2}" pmax="${pi/2}" />
    <xacro:r2c_joint_limit name="${prefix}_body_joint" pmin="${-pi*7.0/6.0}" pmax="${pi*7/6}" />
    <xacro:r2c_quarter prefix="${prefix}" side="left" />
    <xacro:r2c_quarter prefix="${prefix}" side="right" />
  </xacro:macro>

  <xacro:if value="$(arg has_extra_parameters_file)">
    <parameters>$(arg extra_parameters_file)</parameters>
  </xacro:if>
  <ros2_control name="MotionHardwareSystem" type="system">
    <hardware>
      <xacro:if value="$(arg simulate)">
        <plugin>gazebo_ros2_control/GazeboSystem</plugin>
      </xacro:if>
      <xacro:if value="$(arg fake_hardware)">
        <plugin>fake_components/GenericSystem</plugin>
      </xacro:if>
      <xacro:unless value="$(arg simulate)">
        <xacro:unless value="$(arg fake_hardware)">
          <plugin>remote_hardware_interface/RemoteSystemInterface</plugin>
          <param name="namespace">${arg namespace}</param>
        </xacro:unless>
      </xacro:unless>
    </hardware>
    <xacro:r2c_half prefix="front" />
    <xacro:r2c_half prefix="rear" />
  </ros2_control>

  <xacro:macro name="trans_reg" params="name red:=17">
    <transmission name="${name}_transmission">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${name}">
        <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
      </joint>
      <actuator name="${name}_motor">
        <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
        <mechanicalReduction>${red}</mechanicalReduction>
      </actuator>
    </transmission>
  </xacro:macro>
  <xacro:macro name="trans_wheel" params="name red:=30">
    <transmission name="${name}_transmission">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${name}">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
      <actuator name="${name}_motor">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
        <mechanicalReduction>${red}</mechanicalReduction>
      </actuator>
    </transmission>
  </xacro:macro>
  <xacro:trans_reg name="front_turn_table_joint" />
  <xacro:trans_reg name="front_body_joint" />
  <xacro:trans_reg name="front_left_arm_joint" />
  <xacro:trans_reg name="front_left_arm_inner_joint" />
  <xacro:trans_wheel name="front_left_arm_wheel_joint" />
  <xacro:trans_reg name="front_left_arm_camera_servo_lower_joint" red="1" />
  <xacro:trans_reg name="front_left_arm_camera_servo_upper_joint" red="1" />
  <xacro:trans_reg name="front_right_arm_joint" />
  <xacro:trans_reg name="front_left_arm_inner_joint" />
  <xacro:trans_wheel name="front_right_arm_wheel_joint" />
  <xacro:trans_reg name="front_right_arm_camera_servo_lower_joint" red="1" />
  <xacro:trans_reg name="front_right_arm_camera_servo_upper_joint" red="1" />
  <xacro:trans_reg name="rear_turn_table_joint" />
  <xacro:trans_reg name="rear_body_joint" />
  <xacro:trans_reg name="rear_left_arm_joint" />
  <xacro:trans_reg name="rear_left_arm_inner_joint" />
  <xacro:trans_wheel name="rear_left_arm_wheel_joint" />
  <xacro:trans_reg name="rear_left_arm_camera_servo_lower_joint" red="1" />
  <xacro:trans_reg name="rear_left_arm_camera_servo_upper_joint" red="1" />
  <xacro:trans_reg name="rear_right_arm_joint" />
  <xacro:trans_reg name="rear_right_arm_inner_joint" />
  <xacro:trans_wheel name="rear_right_arm_wheel_joint" />
  <xacro:trans_reg name="rear_right_arm_camera_servo_lower_joint" red="1" />
  <xacro:trans_reg name="rear_right_arm_camera_servo_upper_joint" red="1" />

  <gazebo>
    <plugin name="gazebo_ros2_control" filename="libgazebo_ros2_control.${plugin_extension}">
      <ros>
        <namespace>$(arg namespace)</namespace>
      </ros>
      <!-- <robot_param>$(arg namespace)/robot_description</robot_param>
      <robot_param_node>$(arg namespace)/robot_state_publisher</robot_param_node> -->
      <parameters>$(arg controllers_yaml_path)</parameters>
    </plugin>
    <plugin name="openvmp_hardware_simulation_gazebo"
      filename="libopenvmp_hardware_simulation_gazebo.${plugin_extension}">
      <ns>$(arg namespace)</ns>
      <hardware_configuration>$(find openvmp_robot_don1)/config/hardware.yaml</hardware_configuration>
    </plugin>
  </gazebo>

</robot>